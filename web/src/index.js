const petstoreSwaggerBase64 =
  "";
const petstoreSwagger = atob(petstoreSwaggerBase64);
document.getElementById("openapi-editor").innerHTML = petstoreSwagger;

ace.config.set(
  "basePath",
  "https://cdnjs.cloudflare.com/ajax/libs/ace/1.11.2/"
);

const editor = ace.edit("openapi-editor");
editor.session.setMode("ace/mode/json");
editor.session.setUseWrapMode(true);

const editorOutput = ace.edit("openapi-output");

let generatedAPI = {};

const modeMap = {
  md: "ace/mode/markdown",
  json: "ace/mode/json",
  yaml: "ace/mode/yaml",
  ts: "ace/mode/typescript",
  cs: "ace/mode/csharp",
};

function showOutput(filename) {
  editorOutput.setValue(atob(generatedAPI[filename]));
  const extension = filename.split(".").pop();
  editorOutput.session.setMode(modeMap[extension]);
  editorOutput.selection.clearSelection();
  editorOutput.session.setUseWrapMode(true);
}

document.getElementById("file-selector").addEventListener("change", (e) => {
  const selected = e.target.options[e.target.selectedIndex];
  showOutput(selected.value);
});

document.getElementById("generate").addEventListener("click", async (e) => {
  fetch("https://d3h3oloi1i.execute-api.us-east-1.amazonaws.com/dev/generate", {
    method: "POST",
    body: JSON.stringify({
      language: document.getElementById("language-selector").value,
      schema: editor.getValue(),
    })
  })
    .then((response) => response.json())
    .then((data) => {
      console.log(data);
      const selector = document.getElementById("file-selector");

      // populate select with file names
      selector.innerHTML = "";
      Object.keys(data).forEach((file) => {
        const option = document.createElement("option");
        option.value = file;
        option.text = file;
        selector.appendChild(option);
      });

      generatedAPI = data;

      showOutput("README.md");
    });
  return false;
});
